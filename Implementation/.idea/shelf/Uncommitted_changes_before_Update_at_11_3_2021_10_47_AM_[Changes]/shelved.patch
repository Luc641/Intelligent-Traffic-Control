Index: src/main/java/TrafficLights/State.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package TrafficLights;\r\n\r\npublic class State {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/TrafficLights/State.java b/src/main/java/TrafficLights/State.java
--- a/src/main/java/TrafficLights/State.java	(revision 6d8e59f4d8542ab395c07f948c7c01acc31ff72b)
+++ b/src/main/java/TrafficLights/State.java	(date 1635932638203)
@@ -1,4 +1,59 @@
 package TrafficLights;
 
-public class State {
+interface State {
+    /**
+     * Coin insert.
+     *
+     * @param gbm context of this state.
+     */
+    default void red(Counter gbm) {
+    }
+
+    /**
+     * Coin eject.
+     *
+     * @param gbm context of this state.
+     */
+    default void yellow(Counter gbm) {
+    }
+
+    /**
+     * Release gum ball.
+     *
+     * @param gbm context of this state.
+     */
+    default void green(Counter gbm) {
+    }
+
+    default void printReason(Counter gbm) {
+        gbm.getOutput().println(reason());
+    }
+
+    /**
+     * Method giving a reason why a method has no effect.
+     *
+     * @return the reason
+     */
+    String reason();
+
+    /**
+     * Invoke on change state away from this state.
+     * <p>
+     * This implementation is a No-Op.
+     *
+     * @param ctx the context of this state
+     */
+    default void exit(Counter counter) {
+    }
+
+    /**
+     * Invoke on change state into this state.
+     * <p>
+     * This implementation is a No-Op.
+     *
+     * @param ctx the context of this state
+     */
+    default void enter(Counter counter) {
+    }
+
 }
Index: src/main/java/TrafficLights/Switchable.java
===================================================================
diff --git a/src/main/java/TrafficLights/Switchable.java b/src/main/java/TrafficLights/Switchable.java
deleted file mode 100644
--- a/src/main/java/TrafficLights/Switchable.java	(revision 6d8e59f4d8542ab395c07f948c7c01acc31ff72b)
+++ /dev/null	(revision 6d8e59f4d8542ab395c07f948c7c01acc31ff72b)
@@ -1,7 +0,0 @@
-package TrafficLights;
-import java.util.function.Predicate;
-
-public interface Switchable<T> {
-    Predicate<T> switch(String switchTerm);
-
-}
Index: src/main/java/TrafficLights/TrafficLightStates.java
===================================================================
diff --git a/src/main/java/TrafficLights/TrafficLightStates.java b/src/main/java/TrafficLights/TrafficLightStates.java
deleted file mode 100644
--- a/src/main/java/TrafficLights/TrafficLightStates.java	(revision 6d8e59f4d8542ab395c07f948c7c01acc31ff72b)
+++ /dev/null	(revision 6d8e59f4d8542ab395c07f948c7c01acc31ff72b)
@@ -1,5 +0,0 @@
-package TrafficLights;
-
-public enum TrafficLightStates implements Switchable<State> {
-
-}
Index: src/main/java/TrafficLights/TrafficLights.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/TrafficLights/TrafficLights.java b/src/main/java/TrafficLights/TrafficLights.java
new file mode 100644
--- /dev/null	(date 1635932325732)
+++ b/src/main/java/TrafficLights/TrafficLights.java	(date 1635932325732)
@@ -0,0 +1,82 @@
+package TrafficLights;
+
+import java.io.PrintStream;
+
+public class TrafficLights implements TrafficLightAPI {
+    State state;
+
+    TrafficLights() {
+        this( StateEnum.RED ); // aka empty
+    }
+
+    TrafficLights( State initialState ) {
+        state = initialState; // have this machine start in any state
+        state.enter( this);
+    }
+
+    public static void changeState(State newState) {
+        state.exit();
+        state = newState;
+        state.enter();
+    }
+
+    /**
+     * for tests.
+     *
+     * @return the current state
+     */
+    State getState() {
+        return state;
+    }
+
+    @Override
+    public Object isRed(){
+        return null;
+    }
+
+
+    @Override
+    public void changeRed() {
+
+    }
+
+    @Override
+    public void changeYellow() {
+
+    }
+
+    @Override
+    public void changeGreen() {
+
+    }
+
+    @Override
+    public void changeRedYellow() {
+
+    }
+
+    @Override
+    public void changeYellowBlinking() {
+
+    }
+
+    @Override
+    public void changeRedArrow() {
+
+    }
+
+    @Override
+    public void changeYellowArrow() {
+
+    }
+
+    @Override
+    public void changeGreenArrow() {
+
+    }
+
+    @Override
+    public void setOutput(PrintStream output) {
+
+    }
+}
Index: src/main/java/TrafficLights/TrafficLightAPI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/TrafficLights/TrafficLightAPI.java b/src/main/java/TrafficLights/TrafficLightAPI.java
new file mode 100644
--- /dev/null	(date 1635931921188)
+++ b/src/main/java/TrafficLights/TrafficLightAPI.java	(date 1635931921188)
@@ -0,0 +1,35 @@
+package TrafficLights;
+
+import java.io.PrintStream;
+
+public interface TrafficLightAPI {
+
+    void changeRed();
+
+    void changeYellow();
+
+    void changeGreen();
+
+    void changeRedYellow();
+
+    void changeYellowBlinking();
+
+    void changeRedArrow();
+
+    void changeYellowArrow();
+
+    void changeGreenArrow();
+
+
+    /**
+     * Create a machine.
+     *
+     * @return a brand new machine
+     */
+    static TrafficLightAPI createMachine() {
+        return new TrafficLights();
+    }
+
+    void setOutput( PrintStream output );
+
+}
Index: src/main/java/TrafficLights/StateEnum.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/TrafficLights/StateEnum.java b/src/main/java/TrafficLights/StateEnum.java
new file mode 100644
--- /dev/null	(date 1635932638220)
+++ b/src/main/java/TrafficLights/StateEnum.java	(date 1635932638220)
@@ -0,0 +1,102 @@
+package TrafficLights;
+
+enum StateEnum implements State{
+    /**
+     * NO_COIN only reacts to insertCoin and will go to hasCoin.
+     */
+    //<editor-fold defaultstate="expanded" desc="TASK_1A2; __STUDENT_ID__; WEIGHT 10;">
+    RED("You must put in a coin before you can continue") {
+        @Override
+        public void red(Counter counter) {
+            super.red(counter);
+            counter.changeState(YELLOW);
+            counter.getOutput().println("The Light changed to Yellow");
+        }
+    },
+    //</editor-fold>
+
+    /*
+     * HAS_COIN reacts to draw and ejectCoin.
+     *
+     * <ul>
+     * <li>draw dispenses one ball and outputs the result to the machine's
+     * output. If machine is new empty, go to SOLD_OUT, else if winner then go
+     * to WINNER else to NO_COIN.</li>
+     * <li>eject coin goes to NO_COIN.
+     * </ul>
+
+     */
+
+    //<editor-fold defaultstate="expanded" desc="TASK_1A3; __STUDENT_ID__; WEIGHT 10;">
+    YELLOW("You should draw to get your ball") {
+        @Override
+        public void yellow(Counter gbm) {
+            super.yellow(gbm);
+            if (gbm.isRed()) {
+                gbm.changeState(GREEN);
+                gbm.getOutput().println("The Light changed to Green");
+            }
+            gbm.changeState(RED);
+            gbm.getOutput().println("The light changed to Red");
+        }
+
+    },
+    //</editor-fold>
+
+    /*
+     * SOLD_OUT reacts only to refill and with that goes to NO_COIN.
+
+     */
+
+    //<editor-fold defaultstate="expanded" desc="TASK_1A4; __STUDENT_ID__; WEIGHT 10;">
+    GREEN("Machine is empty, waiting for refill") {
+        @Override
+        public void green(Counter gbm, int count) {
+            super.green(gbm, count);
+            gbm.changeState(YELLOW);
+        }
+    },
+    //</editor-fold>
+/*
+
+     * WINNER reacts only to draw and goes to either SOLD_OUT or NO_COIN.
+     *
+    //<editor-fold defaultstate="expanded" desc="TASK_1A5; __STUDENT_ID__; WEIGHT 10;">
+    WINNER("You should draw once more to get an extra ball") {
+        @Override
+        public void draw(Context gbm) {
+            super.draw(gbm);
+            var ball = gbm.dispense();
+            if (gbm.isEmpty()) {
+                gbm.changeState(SOLD_OUT);
+                gbm.getOutput().println(ball);
+            } else {
+                gbm.changeState(NO_COIN);
+                gbm.getOutput().println("You got two gumballs for your coin");
+            }
+        }
+    };
+    //</editor-fold>
+*/
+    final String reason;
+
+    /**
+     * Enum value constructor taking the reason string.
+     *
+     * @param reason for this state
+     *
+     */
+    private StateEnum(String reason) {
+        this.reason = reason;
+    }
+
+    /**
+     * Implement the reason string by returning the reason field.
+     *
+     * @return the reason
+     */
+    @Override
+    public String reason() {
+        return reason;
+    }
+}
Index: src/main/java/TrafficLights/Counter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/TrafficLights/Counter.java b/src/main/java/TrafficLights/Counter.java
new file mode 100644
--- /dev/null	(date 1635932107811)
+++ b/src/main/java/TrafficLights/Counter.java	(date 1635932107811)
@@ -0,0 +1,12 @@
+package TrafficLights;
+
+import java.io.PrintStream;
+
+public interface Counter {
+    void addCounter(int count);
+    int getCount();
+    void changeState ( State newState);
+    PrintStream getOutput();
+
+    boolean isRed();
+}
